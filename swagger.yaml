openapi: 3.0.0
info:
  version: 1.1.0
  title: SIMPL Rest API
  description: API for managing user accounts and their details.

servers:
  - url: http://localhost:5000
    description: Local server
  - url: https://5p7ne0s78c.execute-api.eu-central-1.amazonaws.com
    description: Development server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          description: The current page number being displayed.
          minimum: 1
        totalPages:
          type: integer
          description: The total number of pages available.
        totalItems:
          type: integer
          description: The total number of items across all pages.
      required:
        - currentPage
        - totalPages
        - totalItems
    RequestDTO:
      type: object
      properties:
        id:
          type: string
        employee:
          $ref: "#/components/schemas/EmployeeDTO"
        createdAt:
          type: string
          format: date-time
        changedAt:
          type: string
          format: date-time
        createdBy:
          $ref: "#/components/schemas/EmployeeDTO"
        allowedActions:
          type: array
          items:
            type: string
        status:
          type: string
        daysOffRequested:
          type: integer
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        categories:
          type: array
          items:
            $ref: "#/components/schemas/RequestCategoryDTO"
        subcategories:
          type: array
          items:
            $ref: "#/components/schemas/RequestCategoryDTO"
    RequestStatusDetailsDTO:
      type: object
      properties:
        status:
          type: string
          description: "Current status of the request (e.g., Pending, Approved, etc.)."
        changedAt:
          type: string
          format: date-time
          description: "Timestamp of when the request status was last changed."
        changedBy:
          $ref: "#/components/schemas/EmployeeDTO"
        note:
          type: string
          description: "Note associated with the status change."
    DepartmentDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the department.
        departmentName:
          type: string
          description: The name of the team.
        departmentDescription:
          type: string
          description: A description of the team within the department.
      required:
        - id
        - departmentName
    EmployeeDTO:
      type: object
      description: Data transfer object representing an employee.
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the employee.
        firstName:
          type: string
          description: The first name of the employee.
        lastName:
          type: string
          description: The last name of the employee.
        jobTitle:
          type: string
          description: The job title of the employee within the organization.
        department:
          $ref: "#/components/schemas/DepartmentDTO"
        email:
          type: string
          description: The email of the employee.
        avatarUrl:
          type: string
          description: The URL of the employee's avatar.
      required:
        - id
        - firstName
        - lastName
    EmployeeGOModuleDetailsDTO:
      type: object
      description: Data transfer object representing an employee's go module details.
      properties:
        requestCategories:
          type: array
          items:
            $ref: "#/components/schemas/RequestCategoryDTO"
        supervisors:
          type: array
          items:
            $ref: "#/components/schemas/EmployeeDTO"
        supervisees:
          type: array
          items:
            $ref: "#/components/schemas/EmployeeDTO"
        representatives:
          type: array
          items:
            $ref: "#/components/schemas/EmployeeDTO"
        representees:
          type: array
          items:
            $ref: "#/components/schemas/EmployeeDTO"
    ProfileDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the user's profile.
        email:
          type: string
          format: email
          description: The email address associated with the user's profile.
        employee:
          $ref: "#/components/schemas/EmployeeDTO"
        language:
          type: string
          description: The language preference code for the user's profile.
        notifications:
          description: A list of notification types associated with the user's profile.
          type: array
          items:
            $ref: "#/components/schemas/NotificationTypeDTO"
    NotificationTypeDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the notification type.
        name:
          type: string
          description: The name of the notification type.
        description:
          type: string
          description: A description of the notification type.
        isActive:
          type: boolean
          description: Indicates whether the notification type is active.
    WorkspaceSessionDTO:
      type: object
      properties:
        currentUser:
          $ref: "#/components/schemas/ProfileDTO"
        permissionGroups:
          type: array
          items:
            $ref: "#/components/schemas/GroupDTO"
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/PermissionDTO"
        umModule:
          type: object
          properties:
            departments:
              type: array
              items:
                $ref: "#/components/schemas/DepartmentDTO"
        goModule:
          type: object
          properties:
            details:
              description: Current user employee go module details
              $ref: "#/components/schemas/EmployeeGOModuleDetailsDTO"
            organisationRequestCategories:
              type: array
              items:
                $ref: "#/components/schemas/OrganisationRequestCategoryDTO"
    GroupDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    PermissionDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        key:
          type: string
    RequestCategoryDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        remainingDaysOff:
          type: integer
        totalDaysOff:
          type: integer
        validityStartDate:
          type: string
          format: date
        validityEndDate:
          type: string
          format: date
        year:
          type: integer
    OrganisationRequestCategoryDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        subcategories:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
    OrganisationSettingsDTO:
      type: object
      properties:
        departments:
          type: array
          items:
            $ref: "#/components/schemas/DepartmentDTO"
    GeneralErrorDTO:
      type: object
      description: A general error data transfer object that provides details about an API error.
      properties:
        errorMessage:
          type: string
          description: A human-readable message providing more details about the error.
        errorCode:
          type: integer
          description: A numeric code representing the type of error.
        displayErrorMessage:
          type: string
          description: A message suitable for displaying to end-users, potentially less technical.
      required:
        - errorMessage
        - errorCode
        - displayErrorMessage
    EmployeeDetailsDTO:
      type: object
      properties:
        employeeId:
          type: string
          description: The unique identifier of the employee.
        data:
          type: object
          description: A JSON object containing the dynamic config (Maticni) of the employee.
        createdAt:
          type: string
          format: date-time
          description: The date and time the employee was created.
        changedAt:
          type: string
          format: date-time
        createdBy:
          $ref: "#/components/schemas/EmployeeDTO"
      required:
        - employeeId
    RequestDateRangeDTO:
      type: object
      description: Data transfer object representing a Gantt date range element.
      properties:
        requestId:
          type: string
          description: The unique identifier of the request.
        startDate:
          type: string
          format: date-time
          description: The start date and time of the date range.
        endDate:
          type: string
          format: date-time
          description: The end date and time of the date range.
        typeId:
          type: string
          description: The type identifier of the date range element.
        displayText:
          type: string
          description: The display text for the date range element.
        hexBackgroundColor:
          type: string
          description: The hexadecimal color code for the background of the date range element.
        hexTextColor:
          type: string
          description: The hexadecimal color code for the text of the date range element.
      required:
        - requestId
        - startDate
        - endDate
        - typeId
        - displayText
        - hexBackgroundColor
        - hexTextColor
    SpecialDateDTO:
      type: object
      description: Data transfer object representing a special date.
      properties:
        id:
          type: string
          description: Unique identifier for the special date
        date:
          type: string
          format: date-time
          description: The date of the special event
        name:
          type: string
          description: Name of the special event
        hexBackgroundColor:
          type: string
          description: Hex color code for the background color
          example: "#FFCCCC"
      required:
        - id
        - date
        - name

  parameters:
    page:
      name: page
      in: query
      description: The page number of the collection to retrieve.
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
    pageSize:
      name: pageSize
      in: query
      description: The number of items to return per page.
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    search:
      name: search
      in: query
      description: The search query to filter the collection by matching resources.
      required: false
      schema:
        type: string
    pathId:
      name: id
      in: path
      required: true
      schema:
        type: string
    years:
      name: years
      in: query
      required: true
      description: Array of years to filter by.
      schema:
        type: array
        items:
          type: integer
    requestStatuses:
      name: requestStatuses
      in: query
      description: Array of request statuses to filter by.
      schema:
        type: array
        items:
          type: string

  responses:
    "400":
      description: The server could not understand the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorDTO"
    "401":
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorDTO"
    "403":
      description: User does not have the right credentials.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorDTO"
    "404":
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorDTO"

paths:
  /api/workspace/session:
    get:
      tags:
        - Workspace
      summary: "Retrieve current workspace session"
      description: "Fetches details of a workspace session."
      responses:
        200:
          description: "Workspace sessions retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceSessionDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
  /api/employees:
    get:
      tags:
        - Employees
      summary: List all employees
      description: Retrieves a list of all employees accounts.
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/search"
        - in: query
          name: hasProfile
          schema:
            type: boolean
      responses:
        200:
          description: A list of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/EmployeeDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
    post:
      tags:
        - Employees
      summary: "Create a new employee"
      description: "Creates a new employee with the provided details."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - isFullAccessUser
              properties:
                email:
                  type: string
                  format: email
                  description: The user's email address
                isFullAccessUser:
                  type: boolean
                  description: Flag for creating full access user
                firstName:
                  type: string
                  description: The user's first name.
                lastName:
                  type: string
                  description: The user's last name.
      responses:
        201:
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        409:
          description: User already exists.

  /api/employees/{id}:
    get:
      tags:
        - Employees
      summary: Retrieve a user by Employee ID
      description: Fetches details of a user by their Employee ID.
      parameters:
        - $ref: "#/components/parameters/pathId"
      responses:
        200:
          description: Employee details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  employeeGeneral:
                    $ref: "#/components/schemas/EmployeeDTO"
                  employeeGoModuleDetails:
                    $ref: "#/components/schemas/EmployeeGOModuleDetailsDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/employees/settings/{id}:
    get:
      tags:
        - Employees
      summary: Retrieve employee's settings by Employee ID
      description: Fetches details of a user by their Employee ID.
      parameters:
        - $ref: "#/components/parameters/pathId"
      responses:
        200:
          description: Employee details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  employeeGeneral:
                    $ref: "#/components/schemas/EmployeeDTO"
                  employeeGoModuleDetails:
                    $ref: "#/components/schemas/EmployeeGOModuleDetailsDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

    put:
      tags:
        - Employees
      summary: Update an employees settings
      description: Updates an existing user with the provided details.
      parameters:
        - $ref: "#/components/parameters/pathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: "The user's first name (optional)."
                lastName:
                  type: string
                  description: "The user's last name (optional)."
                jobTitle:
                  type: string
                  description: "The user's job title (optional)."
                departmentId:
                  type: string
                  description: "The user's team (optional)."
                image:
                  type: string
                  description: "Optional base64 encoded image of the user."
                supervisorEmployeeIds:
                  type: array
                  items:
                    type: string
                  description: "List of supervisor Firebase UIDs to update (optional)."
                representativeEmployeeIds:
                  type: array
                  items:
                    type: string
                  description: "List of representative Firebase UIDs to update (optional)."
                requestCategories:
                  type: array
                  description: "List of request categories to update (optional)."
                  items:
                    $ref: "#/components/schemas/RequestCategoryDTO"
      responses:
        200:
          description: Employee updated successfully.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

    delete:
      tags:
        - Employees
      summary: Delete an employee
      description: Deletes an existing user with the provided employee ID.
      parameters:
        - $ref: "#/components/parameters/pathId"
      responses:
        200:
          description: Employee deleted successfully.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/employees/details/{id}:
    get:
      tags:
        - Employees
      summary: Retrieve employee details by Employee ID
      description: Fetches detailed information of an employee by their Employee ID.
      parameters:
        - $ref: "#/components/parameters/pathId"
      responses:
        200:
          description: Employee details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeDetailsDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
    put:
      tags:
        - Employees
      summary: Update employee details
      description: Updates an existing employee with the provided details.
      parameters:
        - $ref: "#/components/parameters/pathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeDetailsDTO"
      responses:
        200:
          description: Employee details updated successfully.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/profile:
    get:
      tags:
        - Profiles
      summary: Get Profile Information
      description: Retrieves profile information for the current user.
      responses:
        200:
          description: Successful response with profile data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDTO"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
    put:
      tags:
        - Profiles
      summary: Update current profile
      description: Updates an existing user with the provided details.
      operationId: updateProfileNotifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                jobTitle:
                  type: string
                languageCode:
                  type: string
                notificationsIds:
                  type: array
                  items:
                    type: string
                  description: List of representative Firebase UIDs to update (optional).
      responses:
        200:
          description: Profile updated successfully.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
  /api/requests:
    get:
      summary: List all requests
      description: Retrieves a list of all leave requests based on query parameters.
      tags:
        - Requests
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - in: query
          name: employeeId
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: createdAt
          schema:
            type: string
            format: date-time
        - in: query
          name: changedAt
          schema:
            type: string
            format: date-time
        - in: query
          name: requestStatus
          schema:
            type: string
        - in: query
          name: includeRepresentees
          schema:
            type: boolean
        - in: query
          name: includeRepresentatives
          schema:
            type: boolean
        - in: query
          name: includeSupervisees
          schema:
            type: boolean
        - in: query
          name: includeSupervisors
          schema:
            type: boolean
        - in: query
          name: includeCurrentEmployee
          schema:
            type: boolean
      responses:
        200:
          description: A list of requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/RequestDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
    post:
      tags:
        - Requests
      summary: Create a new leave request
      description: Allows users to create a new leave request with details such as start and end dates, the number of days off, a note, and the type of request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employeeId:
                  type: string
                  description: The ID of the employee creating the request.
                startDate:
                  type: string
                  format: date
                  description: Start date of the leave in YYYY-MM-DD format.
                endDate:
                  type: string
                  format: date
                  description: End date of the leave in YYYY-MM-DD format.
                note:
                  type: string
                  description: Additional notes regarding the leave request.
                categoryId:
                  type: string
                  description: The ID of the request category type (e.g., vacation, sick leave).
                subCategoryId:
                  type: string
                  description: The ID of the request sub-category type (e.g., vacation, sick leave).
              required:
                - employeeId
                - startDate
                - endDate
                - note
                - categoryId
      responses:
        201:
          description: Leave request created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                    description: "The ID of the newly created leave request."
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/requests/{id}:
    get:
      tags:
        - Requests
      summary: Get a specific request
      description: Retrieves a specific leave request by its ID.
      parameters:
        - $ref: "#/components/parameters/pathId"
      responses:
        200:
          description: Detailed request information.
          content:
            application/json:
              schema:
                properties:
                  request:
                    $ref: "#/components/schemas/RequestDTO"
                  requestHistory:
                    type: array
                    items:
                      $ref: "#/components/schemas/RequestStatusDetailsDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
    put:
      tags:
        - Requests
      summary: Update a specific request
      description: Allows users to update a specific leave request.
      parameters:
        - $ref: "#/components/parameters/pathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Pending, Approved, Rejected, Canceled]
                  description: The new status of the request
                note:
                  type: string
                  description: An optional note about the status update
      responses:
        200:
          description: Status updated successfully.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/requests/employees:
    get:
      tags:
        - Requests
      summary: List all employees in GO module
      description: Retrieves a list of all employees accounts.
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/search"
      responses:
        200:
          description: A list of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/EmployeeDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/requests/employees/{id}:
    get:
      tags:
        - Requests
      summary: Retrieve a employees GO module data
      description: Fetches employees GO module data by their Employee ID.
      parameters:
        - $ref: "#/components/parameters/pathId"
      responses:
        200:
          description: Employee details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  employeeGeneral:
                    $ref: "#/components/schemas/EmployeeDTO"
                  employeeGoModuleDetails:
                    $ref: "#/components/schemas/EmployeeGOModuleDetailsDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/requests/special-dates:
    get:
      tags:
        - Requests
      summary: Retrieve special dates for specified years
      description: Fetches special dates for the given array of years.
      parameters:
        - $ref: "#/components/parameters/years"
      responses:
        200:
          description: Special dates retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  specialDates:
                    type: array
                    items:
                      $ref: "#/components/schemas/SpecialDateDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/requests/date-ranges:
    get:
      tags:
        - Requests Date Ranges
      summary: Retrieve date range elements for employees
      description: Fetches a list of date range elements for all employees.
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/requestStatuses"
        - $ref: "#/components/parameters/years"
      responses:
        200:
          description: Gantt date range elements retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    employee:
                      $ref: "#/components/schemas/EmployeeDTO"
                    dateRanges:
                      type: array
                      items:
                        $ref: "#/components/schemas/RequestDateRangeDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/requests/date-ranges/employees/{id}:
    get:
      tags:
        - Requests Date Ranges
      summary: Retrieve date range elements for specific employee
      description: Fetches a list of date range elements for specific employee.
      parameters:
        - $ref: "#/components/parameters/pathId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/requestStatuses"
        - $ref: "#/components/parameters/years"
      responses:
        200:
          description: Date range elements retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  dateRanges:
                    type: array
                    items:
                      $ref: "#/components/schemas/RequestDateRangeDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/organisation/settings:
    get:
      tags:
        - Organisation
      summary: Retrieve organisation settings
      description: Fetches organisation settings.
      responses:
        200:
          description: Organisation settings retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  umModule:
                    type: object
                    properties:
                      departments:
                        type: array
                        items:
                          $ref: "#/components/schemas/DepartmentDTO"
                  goModule:
                    type: object
                    properties:
                      organisationRequestCategories:
                        type: array
                        items:
                          $ref: "#/components/schemas/OrganisationRequestCategoryDTO"
                      specialDates:
                        type: array
                        items:
                          $ref: "#/components/schemas/SpecialDateDTO"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

    put:
      tags:
        - Organisation
      summary: Update organisation settings
      description: Updates organisation settings with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                umModule:
                  type: object
                  properties:
                    departments:
                      type: array
                      items:
                        $ref: "#/components/schemas/DepartmentDTO"
                goModule:
                  type: object
                  properties:
                    organisationRequestCategories:
                      type: array
                      items:
                        $ref: "#/components/schemas/OrganisationRequestCategoryDTO"
                    specialDates:
                      type: array
                      items:
                        $ref: "#/components/schemas/SpecialDateDTO"
      responses:
        200:
          description: Organisation settings updated successfully.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/export/organisation-work-schedule:
    get:
      tags:
        - Export
      summary: Export organisation work schedule to file
      description: Downloads an Excel file containing the working days data for the all employees.
      parameters:
        - in: query
          name: month
          schema:
            type: integer
        - in: query
          name: year
          schema:
            type: integer
        - in: query
          name: file_format
          schema:
            type: string
      responses:
        200:
          description: Excel file containing the days off data.
          content:
            application/octet-stream:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  file_content:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/export/organisation-go-requests:
    get:
      tags:
        - Export
      summary: Export organisation absence requests to file
      description: Downloads an Excel file containing the days off data for the all employees.
      parameters:
        - in: query
          name: status
          schema:
            type: array
            items:
              type: string
        - in: query
          name: month
          schema:
            type: integer
        - in: query
          name: year
          schema:
            type: integer
        - in: query
          name: file_format
          schema:
            type: string
      responses:
        200:
          description: Excel file containing the days off data.
          content:
            application/octet-stream:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  file_content:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/export/employee-data:
    get:
      tags:
        - Export
      summary: Export all employee data to file
      description: Downloads an Excel file containing the employee data.
      parameters:
        - in: query
          name: file_format
          schema:
            type: string
      responses:
        200:
          description: Excel file containing the employee data.
          content:
            application/octet-stream:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  file_content:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /api/export/employee-data/{id}:
    get:
      tags:
        - Export
      summary: Export employee data to file
      description: Downloads an Excel file containing the employee data.
      parameters:
        - $ref: "#/components/parameters/pathId"
        - in: query
          name: file_format
          schema:
            type: string
      responses:
        200:
          description: Excel file containing the employee data.
          content:
            application/octet-stream:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  file_content:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
